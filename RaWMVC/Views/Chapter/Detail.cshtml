@model RaWMVC.ViewModels.ChapterDetailViewModel

@{
    ViewData["Title"] = "Detail";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<main class="main_content">
    <div class="subnavigate d-flex rounded">
        <div class="chapter_number">
            <div class="btn-group">
                <button class="btn_chapter dropdown-toggle ms-3"
                        type="button"
                        data-bs-toggle="dropdown"
                        data-bs-auto-close="outside"
                        aria-expanded="false">
                    <i class="fa-solid fa-list-ol"></i> <span>@Model.Chapters.Count()</span>
                </button>
                <ul class="dropdown-menu">
                    @if (Model.Chapters != null && Model.Chapters.Any())
                    {
                        @foreach (var chapter in Model.Chapters)
                        {
                            <li class="dropdown_chapter">
                                <a href="@Url.Action("Detail", "Chapter", new { idChapter = chapter.ChapterId})"
                                   class="dropdown-item d-flex text-decoration-none text-dark w-100 justify-content-between">
                                    <p>
                                        @chapter.ChapterTitle
                                    </p>
                                </a>
                            </li>
                        }
                    }
                    else
                    {
                        <li class="dropdown_chapter">
                            <span class="dropdown-item text-muted">No chapters available.</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
        <h5 class="title_story">
            @Model.Chapter.ChapterTitle
        </h5>
        <div class="placement">
            <i class="fa-regular fa-heart heart @(Model.IsLiked ? "is-active" : "")"
               id="likeButton"
               onclick="toggleLike('@Model.ChapterId')">
            </i>
            <span id="likeCount">@Model.LikeCount</span>
        </div>
        <div class="author d-flex justify-content-between mb-2 me-3">
            <img class="img_author me-2"
                 src="@Model.ProfilePicture"
                 alt="" />
            <p class="fst-italic">@Model.Username</p>
        </div>
    </div>
    <div class="reading_story_container d-flex mt-5">
        <div class="story_content shadow p-3 mb-5 bg-body-tertiary rounded w-50">
            <p>@Html.Raw(Model.Chapter.ChapterContent)</p>

            <div class="d-flex text-center justify-content-center align-item-center">
                @if (Model.NextChapter != null)
                {
                    <a href="@Url.Action("Detail", "Chapter", new { idChapter = Model.NextChapter.ChapterId })" class="btn btn-outline-secondary">
                        Countinue <i class="fa-solid fa-forward"></i>
                    </a>
                }
                else
                {
                    <button disabled class="btn btn-outline-secondary">
                        Countinue <i class="fa-solid fa-forward"></i>
                    </button>
                }
            </div>
        </div>
        <div class="right_container w-50">
            <div class="rcm_story">
                <div class="also_like_story shadow p-3 mb-5 bg-body-tertiary rounded">
                    <h3>You may also like</h3>
                    @foreach (var story in Model.SuggestedStories)
                    {
                        <a href="@Url.Action("Detail", "Story", new { idStory = story.StoryId })" 
                            class="text-decoration-none text-dark">
                            <div class="also_like_item d-flex w-100">
                                <img src="@Url.Content("~/storyImg/" + story.Medium.FileName + "." + story.Medium.Extension)"
                                     alt="Cover image" />
                                <div class="infor_item ms-4">
                                    <strong>
                                        @story.StoryTitle
                                    </strong>
                                    <p class="description mt-4">
                                        @story.StoryDescription
                                    </p>
                                </div>
                            </div>
                        </a>
                    }
                </div>
            </div>
            <div class="comments shadow p-3 mb-5 bg-body-tertiary rounded">
                @await Html.PartialAsync("_Comments", Model.CommentVM?.Comments)
            </div>
        </div>
    </div>
</main>

@section Scripts {
    <script>
        //=== Delete Comment ===//
        var inputChapterId = document.getElementById("chapterId").value;
        var divCommetList = document.getElementById("comment-list");

        function deleteComment(idComment, chapterId) {
            $.ajax({
                type: 'POST',
                url: "/Comment/Delete",
                data: {
                    idComment,
                    chapterId: inputChapterId
                },
                success: function (data) {
                    toastr.success(data.message);

                    setTimeout(function () {
                        window.location.reload();
                    }, 500);
                },
                error: function (err) {

                },
                complete: function (e) {

                },
            });
        }
        //=== Like Function ===//
        let hasClicked = false;

        function increaseCountLike(newCount) {
            const countSpan = document.getElementById('likeCount');
            countSpan.textContent = newCount;

            hasClicked = true;

            const heart = document.querySelector('.heart i');
            heart.classList.add('is-active'); // Đổi màu biểu tượng trái tim
        }

        function decreaseCountLike(newCount) {
            const countSpan = document.getElementById('likeCount');
            countSpan.textContent = newCount;

            hasClicked = false;

            const heart = document.querySelector('.heart');
            heart.classList.remove('is-active'); // Trở về màu ban đầu
        }

        function toggleLike(chapterId) {
            const userId = '@Model.UserId'; // Lấy User ID từ server
            const heart = document.getElementById('likeButton');

            $.ajax({
                url: '/Like/ToggleLike',
                type: 'POST',
                data: {
                    chapterId: chapterId,
                    userId: userId
                },
                success: function (response) {
                    if (response.success) {
                        const countSpan = document.getElementById('likeCount');
                        countSpan.textContent = response.likeCount; // Cập nhật số lượt like

                        // Thay đổi trạng thái biểu tượng trái tim
                        if (response.isLiked) {
                            heart.classList.remove('fa-regular'); // Xóa icon rỗng
                            heart.classList.add('fa-solid'); // Thêm icon đầy
                            heart.classList.add('is-active'); // Hiển thị màu đỏ
                        } else {
                            heart.classList.remove('fa-solid'); // Xóa icon đầy
                            heart.classList.add('fa-regular'); // Thêm icon rỗng
                            heart.classList.remove('is-active'); // Trở về mặc định
                        }
                    } else {
                        alert(response.message);
                    }
                },
                error: function () {
                    alert('An error occurred while toggling the like.');
                }
            });
        }

        // Khởi tạo trạng thái khi trang được load
        document.addEventListener("DOMContentLoaded", function () {
            const isLiked = @Model.IsLiked.ToString().ToLower();
            const heart = document.getElementById('likeButton');

            if (isLiked === "true") {
                heart.classList.remove('fa-regular'); // Xóa icon rỗng
                heart.classList.add('fa-solid'); // Thêm icon đầy
                heart.classList.add('is-active'); // Hiển thị màu đỏ nếu đã "like"
            } else {
                heart.classList.remove('fa-solid'); // Xóa icon đầy
                heart.classList.add('fa-regular'); // Trở về icon rỗng
                heart.classList.remove('is-active'); // Trạng thái ban đầu nếu chưa "like"
            }
        });
    </script>
}